diff -urN origsrc/boost_1_52_0/libs/context/build/Jamfile.v2 src/boost_1_52_0/libs/context/build/Jamfile.v2
--- origsrc/boost_1_52_0/libs/context/build/Jamfile.v2	2012-09-18 18:06:47.000000000 +0900
+++ src/boost_1_52_0/libs/context/build/Jamfile.v2	2012-12-13 11:58:42.994776700 +0900
@@ -28,6 +28,7 @@
     local tmp = elf ;
     if [ os.name ] = "MACOSX" { tmp = mach-o ; }
     if [ os.name ] = "NT" { tmp = pe ; }
+    if [ os.name ] = "CYGWIN" { tmp = pe ; }
     return $(tmp) ;
 }
 
@@ -44,6 +45,7 @@
 {
     local tmp = sysv ;
     if [ os.name ] = "NT" { tmp = ms ; }
+    else if [ os.name ] = "CYGWIN" { tmp = cyg ; }
     else if [ os.platform ] = "ARM" { tmp = aapcs ; }
     else if [ os.platform ] = "MIPS" { tmp = o32 ; }
     return $(tmp) ;
@@ -53,6 +55,7 @@
    : aapcs
      eabi
      ms
+     cyg
      n32
      n64
      o32
@@ -314,6 +317,28 @@
    ;
 
 alias asm_context_sources
+   : [ make asm/make_i386_ms_pe_gas.o : asm/make_i386_ms_pe_gas.S : @gas ]
+     [ make asm/jump_i386_ms_pe_gas.o : asm/jump_i386_ms_pe_gas.S : @gas ]
+   : <abi>ms
+     <address-model>32
+     <architecture>x86
+     <binary-format>pe
+     <target-os>windows
+     <toolset>gcc
+   ;
+
+alias asm_context_sources
+   : [ make asm/make_i386_cyg_pe_gas.o : asm/make_i386_cyg_pe_gas.S : @gas ]
+     [ make asm/jump_i386_cyg_pe_gas.o : asm/jump_i386_cyg_pe_gas.S : @gas ]
+   : <abi>cyg
+     <address-model>32
+     <architecture>x86
+     <binary-format>pe
+     <target-os>cygwin
+     <toolset>gcc
+   ;
+
+alias asm_context_sources
    : [ make asm/make_i386_ms_pe_masm.o : asm/make_i386_ms_pe_masm.asm : @masm ]
      [ make asm/jump_i386_ms_pe_masm.o : asm/jump_i386_ms_pe_masm.asm : @masm ]
    : <abi>ms
@@ -446,6 +471,14 @@
    ;
 
 alias context_sources
+   : fcontext.cpp
+     seh.cpp
+     guarded_stack_allocator_windows.cpp
+     utils_windows.cpp
+   : <target-os>cygwin
+   ;
+
+alias context_sources
    : fcontext.cpp
      guarded_stack_allocator_posix.cpp
      utils_posix.cpp
diff -urN origsrc/boost_1_52_0/libs/context/src/asm/jump_i386_cyg_pe_gas.S src/boost_1_52_0/libs/context/src/asm/jump_i386_cyg_pe_gas.S
--- origsrc/boost_1_52_0/libs/context/src/asm/jump_i386_cyg_pe_gas.S	1970-01-01 09:00:00.000000000 +0900
+++ src/boost_1_52_0/libs/context/src/asm/jump_i386_cyg_pe_gas.S	2012-12-13 12:13:12.187839500 +0900
@@ -0,0 +1,116 @@
+/*
+            Copyright Oliver Kowalke 2009.
+   Distributed under the Boost Software License, Version 1.0.
+      (See accompanying file LICENSE_1_0.txt or copy at
+          http://www.boost.org/LICENSE_1_0.txt)
+*/
+
+/********************************************************************
+ *                                                                  *
+ *  --------------------------------------------------------------  *
+ *  |    0    |    1    |    2    |    3    |    4     |    5    |  *
+ *  --------------------------------------------------------------  *
+ *  |    0h   |   04h   |   08h   |   0ch   |   010h   |   014h  |  *
+ *  --------------------------------------------------------------  *
+ *  |   EDI   |   ESI   |   EBX   |   EBP   |   ESP    |   EIP   |  *
+ *  --------------------------------------------------------------  *
+ *  --------------------------------------------------------------  *
+ *  |    6    |    7    |    8    |                              |  *
+ *  --------------------------------------------------------------  *
+ *  |   018h  |   01ch  |   020h  |                              |  *
+ *  --------------------------------------------------------------  *
+ *  |    sp   |   size  |  limit  |                              |  *
+ *  --------------------------------------------------------------  *
+ *  --------------------------------------------------------------  *
+ *  |    9    |                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  |  024h   |                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  |fc_execpt|                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  --------------------------------------------------------------  *
+ *  |   10    |                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  |  028h   |                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  |fc_strage|                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  --------------------------------------------------------------  *
+ *  |   11    |    12   |                                        |  *
+ *  --------------------------------------------------------------  *
+ *  |  02ch   |   030h  |                                        |  *
+ *  --------------------------------------------------------------  *
+ *  | fc_mxcsr|fc_x87_cw|                                        |  *
+ *  --------------------------------------------------------------  *
+ *                                                                  *
+ * *****************************************************************/
+
+/* Based on jump_i386_ms_pe_masm.asm and jump_i386_sysv_elf_gas.S */
+
+.text
+.globl _jump_fcontext
+.align 2
+.def _jump_fcontext; .scl 2; .type 32; .endef
+_jump_fcontext:
+    movl    0x4(%esp), %ecx         /* load address of the first fcontext_t arg */
+    movl    %edi,       (%ecx)      /* save EDI */
+    movl    %esi,       0x4(%ecx)   /* save ESI */
+    movl    %ebx,       0x8(%ecx)   /* save EBX */
+    movl    %ebp,       0xc(%ecx)   /* save EBP */
+
+    movl    %fs:0x18(,1), %edx      /* load NT_TIB */
+    movl    (%edx),     %eax        /* load current SEH exception list */
+    movl    %eax,       0x24(%ecx)  /* save current exception list */
+
+/* Do not touch NT_TIB stack base to keep cygtls */
+/*  movl    0x4(%edx),  %eax      *//* load current stack base */
+/*  movl    %eax,       0x18(%ecx)*//* save current stack base */
+/*  movl    0x8(%edx),  %eax      *//* load current stack limit */
+/*  mov     %eax,       0x20(%ecx)*//* save current stack limit */
+/* Do not touch NT_TIB stack base to keep cygtls */
+
+    movl    0x10(%edx), %eax        /* load fiber local storage */
+    movl    %eax,       0x28(%ecx)  /* save fiber local storage */
+
+    leal    0x4(%esp),  %eax        /* exclude the return address */
+    movl    %eax,       0x10(%ecx)  /* save as stack pointer */
+    movl    (%esp),     %eax        /* load return address */
+    movl    %eax,       0x14(%ecx)  /* save return address */
+
+    movl    0x8(%esp),   %edx       /* load address of the second fcontext_t arg */
+    movl    (%edx),      %edi       /* restore EDI */
+    movl    0x4(%edx),   %esi       /* restore ESI */
+    movl    0x8(%edx),   %ebx       /* restore EBX */
+    movl    0xc(%edx),   %ebp       /* restore EBP */
+
+    movl    0x10(%esp),  %eax       /* check if fpu enve preserving was requested */
+    test    %eax,        %eax
+    je      1f
+
+    stmxcsr  0x2c(%ecx)             /* save MMX control and status word */
+    fnstcw   0x30(%ecx)             /* save x87 control word */
+    ldmxcsr  0x2c(%edx)             /* restore MMX control and status word */
+    fldcw    0x30(%edx)             /* restore x87 control word */
+1:
+    movl    %edx,       %ecx
+    movl    %fs:0x18(,1), %edx      /* load NT_TIB */
+    movl    0x24(%ecx), %eax        /* load SEH exception list */
+    movl    %eax,       (%edx)      /* restore next SEH item */
+
+/* Do not touch NT_TIB stack base to keep cygtls */
+/*  movl    0x18(%ecx), %eax      *//* load stack base */
+/*  movl    %eax,       0x4(%edx) *//* restore stack base */
+/*  movl    0x20(%ecx), %eax      *//* load stack limit */
+/*  movl    %eax,       0x8(%edx) *//* restore stack limit */
+/* Do not touch NT_TIB stack base to keep cygtls */
+
+    movl    0x28(%ecx), %eax        /* load fiber local storage */
+    movl    %eax,       0x10(%edx)  /* restore fiber local storage */
+
+    movl    0xc(%esp),   %eax       /* use third arg as return value after jump */
+
+    movl    0x10(%ecx),  %esp       /* restore ESP */
+    movl    %eax,        0x4(%esp)  /* use third arg as first arg in context function */
+    movl    0x14(%ecx),  %ecx       /* fetch the address to return to */
+
+    jmp     *%ecx                   /* indirect jump to context */
diff -urN origsrc/boost_1_52_0/libs/context/src/asm/jump_i386_ms_pe_gas.S src/boost_1_52_0/libs/context/src/asm/jump_i386_ms_pe_gas.S
--- origsrc/boost_1_52_0/libs/context/src/asm/jump_i386_ms_pe_gas.S	1970-01-01 09:00:00.000000000 +0900
+++ src/boost_1_52_0/libs/context/src/asm/jump_i386_ms_pe_gas.S	2012-12-13 12:13:34.062979500 +0900
@@ -0,0 +1,108 @@
+/*
+            Copyright Oliver Kowalke 2009.
+   Distributed under the Boost Software License, Version 1.0.
+      (See accompanying file LICENSE_1_0.txt or copy at
+          http://www.boost.org/LICENSE_1_0.txt)
+*/
+
+/********************************************************************
+ *                                                                  *
+ *  --------------------------------------------------------------  *
+ *  |    0    |    1    |    2    |    3    |    4     |    5    |  *
+ *  --------------------------------------------------------------  *
+ *  |    0h   |   04h   |   08h   |   0ch   |   010h   |   014h  |  *
+ *  --------------------------------------------------------------  *
+ *  |   EDI   |   ESI   |   EBX   |   EBP   |   ESP    |   EIP   |  *
+ *  --------------------------------------------------------------  *
+ *  --------------------------------------------------------------  *
+ *  |    6    |    7    |    8    |                              |  *
+ *  --------------------------------------------------------------  *
+ *  |   018h  |   01ch  |   020h  |                              |  *
+ *  --------------------------------------------------------------  *
+ *  |    sp   |   size  |  limit  |                              |  *
+ *  --------------------------------------------------------------  *
+ *  --------------------------------------------------------------  *
+ *  |    9    |                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  |  024h   |                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  |fc_execpt|                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  --------------------------------------------------------------  *
+ *  |   10    |                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  |  028h   |                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  |fc_strage|                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  --------------------------------------------------------------  *
+ *  |   11    |    12   |                                        |  *
+ *  --------------------------------------------------------------  *
+ *  |  02ch   |   030h  |                                        |  *
+ *  --------------------------------------------------------------  *
+ *  | fc_mxcsr|fc_x87_cw|                                        |  *
+ *  --------------------------------------------------------------  *
+ *                                                                  *
+ * *****************************************************************/
+
+/* Based on jump_i386_ms_pe_masm.asm and jump_i386_sysv_elf_gas.S */
+
+.text
+.globl _jump_fcontext
+.align 2
+.def _jump_fcontext; .scl 2; .type 32; .endef
+_jump_fcontext:
+    movl    0x4(%esp), %ecx         /* load address of the first fcontext_t arg */
+    movl    %edi,       (%ecx)      /* save EDI */
+    movl    %esi,       0x4(%ecx)   /* save ESI */
+    movl    %ebx,       0x8(%ecx)   /* save EBX */
+    movl    %ebp,       0xc(%ecx)   /* save EBP */
+
+    movl    %fs:0x18(,1), %edx      /* load NT_TIB */
+    movl    (%edx),     %eax        /* load current SEH exception list */
+    movl    %eax,       0x24(%ecx)  /* save current exception list */
+    movl    0x4(%edx),  %eax        /* load current stack base */
+    movl    %eax,       0x18(%ecx)  /* save current stack base */
+    movl    0x8(%edx),  %eax        /* load current stack limit */
+    mov     %eax,       0x20(%ecx)  /* save current stack limit */
+    movl    0x10(%edx), %eax        /* load fiber local storage */
+    movl    %eax,       0x28(%ecx)  /* save fiber local storage */
+
+    leal    0x4(%esp),  %eax        /* exclude the return address */
+    movl    %eax,       0x10(%ecx)  /* save as stack pointer */
+    movl    (%esp),     %eax        /* load return address */
+    movl    %eax,       0x14(%ecx)  /* save return address */
+
+    movl    0x8(%esp),   %edx       /* load address of the second fcontext_t arg */
+    movl    (%edx),      %edi       /* restore EDI */
+    movl    0x4(%edx),   %esi       /* restore ESI */
+    movl    0x8(%edx),   %ebx       /* restore EBX */
+    movl    0xc(%edx),   %ebp       /* restore EBP */
+
+    movl    0x10(%esp),  %eax       /* check if fpu enve preserving was requested */
+    test    %eax,        %eax
+    je      1f
+
+    stmxcsr  0x2c(%ecx)             /* save MMX control and status word */
+    fnstcw   0x30(%ecx)             /* save x87 control word */
+    ldmxcsr  0x2c(%edx)             /* restore MMX control and status word */
+    fldcw    0x30(%edx)             /* restore x87 control word */
+1:
+    movl    %edx,       %ecx
+    movl    %fs:0x18(,1), %edx      /* load NT_TIB */
+    movl    0x24(%ecx), %eax        /* load SEH exception list */
+    movl    %eax,       (%edx)      /* restore next SEH item */
+    movl    0x18(%ecx), %eax        /* load stack base */
+    movl    %eax,       0x4(%edx)   /* restore stack base */
+    movl    0x20(%ecx), %eax        /* load stack limit */
+    movl    %eax,       0x8(%edx)   /* restore stack limit */
+    movl    0x28(%ecx), %eax        /* load fiber local storage */
+    movl    %eax,       0x10(%edx)  /* restore fiber local storage */
+
+    movl    0xc(%esp),   %eax       /* use third arg as return value after jump */
+
+    movl    0x10(%ecx),  %esp       /* restore ESP */
+    movl    %eax,        0x4(%esp)  /* use third arg as first arg in context function */
+    movl    0x14(%ecx),  %ecx       /* fetch the address to return to */
+
+    jmp     *%ecx                   /* indirect jump to context */
diff -urN origsrc/boost_1_52_0/libs/context/src/asm/make_i386_cyg_pe_gas.S src/boost_1_52_0/libs/context/src/asm/make_i386_cyg_pe_gas.S
--- origsrc/boost_1_52_0/libs/context/src/asm/make_i386_cyg_pe_gas.S	1970-01-01 09:00:00.000000000 +0900
+++ src/boost_1_52_0/libs/context/src/asm/make_i386_cyg_pe_gas.S	2012-12-13 12:47:01.482076900 +0900
@@ -0,0 +1,105 @@
+/*
+            Copyright Oliver Kowalke 2009.
+   Distributed under the Boost Software License, Version 1.0.
+      (See accompanying file LICENSE_1_0.txt or copy at
+          http://www.boost.org/LICENSE_1_0.txt)
+*/
+
+/********************************************************************
+ *                                                                  *
+ *  --------------------------------------------------------------  *
+ *  |    0    |    1    |    2    |    3    |    4     |    5    |  *
+ *  --------------------------------------------------------------  *
+ *  |    0h   |   04h   |   08h   |   0ch   |   010h   |   014h  |  *
+ *  --------------------------------------------------------------  *
+ *  |   EDI   |   ESI   |   EBX   |   EBP   |   ESP    |   EIP   |  *
+ *  --------------------------------------------------------------  *
+ *  --------------------------------------------------------------  *
+ *  |    6    |    7    |    8    |                              |  *
+ *  --------------------------------------------------------------  *
+ *  |   018h  |   01ch  |   020h  |                              |  *
+ *  --------------------------------------------------------------  *
+ *  |    sp   |   size  |  limit  |                              |  *
+ *  --------------------------------------------------------------  *
+ *  --------------------------------------------------------------  *
+ *  |    9    |                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  |  024h   |                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  |fc_execpt|                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  --------------------------------------------------------------  *
+ *  |   10    |                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  |  028h   |                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  |fc_strage|                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  --------------------------------------------------------------  *
+ *  |   11    |    12   |                                        |  *
+ *  --------------------------------------------------------------  *
+ *  |  02ch   |   030h  |                                        |  *
+ *  --------------------------------------------------------------  *
+ *  | fc_mxcsr|fc_x87_cw|                                        |  *
+ *  --------------------------------------------------------------  *
+ *                                                                  *
+ * *****************************************************************/
+
+/* Based on make_i386_ms_pe_masm.asm and make_i386_sysv_elf_gas.S */
+
+.text
+.globl _make_fcontext
+.align 2
+.def _make_fcontext; .scl 2; .type 32; .endef
+_make_fcontext:
+    pushl  %ebp                         /* save previous frame pointer; get the stack 16 byte aligned */
+    movl   %esp,           %ebp         /* set EBP to ESP */
+    subl   $0x10,          %esp         /* allocate stack space */
+
+    movl   0x8(%ebp),      %eax         /* load 1. arg of make_fcontext, pointer to context stack (base) */
+    leal   -0x34(%eax),    %eax         /* reserve space for fcontext_t at top of context stack */
+    movl   %eax,           (%esp)       /* address in EAX becomes 1. arg of align_stack */
+    call   _align_stack                 /* call align_stack, EAX contains address at 16 byte boundary after return */
+                                        /* pointer to fcontext_t and address of context stack */
+
+    movl   0x8(%ebp),      %ecx         /* load 1. arg of make_fcontext, pointer to context stack (base) */
+    movl   %ecx,           0x18(%eax)   /* save address of context stack (base) in fcontext_t */
+    movl   0xc(%ebp),      %edx         /* load 2. arg of make_fcontext, context stack size */
+    movl   %edx,           0x1c(%eax)   /* save context stack size in fcontext_t */
+    negl   %edx                         /* negate stack size for LEA instruction (== substraction) */
+    leal   (%ecx,%edx),    %ecx         /* compute bottom address of context stack (limit) */
+    movl   %ecx,           0x20(%eax)   /* save address of context stack (limit) in fcontext_t */
+    movl   0x10(%ebp),     %ecx         /* load 3. arg of make_fcontext, pointer to context function */
+    movl   %ecx,           0x14(%eax)   /* save address of context function in fcontext_t */
+
+    stmxcsr  0x2c(%eax)                 /* save MMX control and status word */
+    fnstcw   0x30(%eax)                 /* save x87 control word */
+
+    leal   -0x1c(%eax),    %edx         /* reserve space for the last frame on context stack; (ESP - 0x4) % 16 == 0 */
+    movl   %edx,           0x10(%eax)   /* save address in EDX as stack pointer for context function */
+
+    movl   $_seh_fcontext, %ecx         /* set ECX to exception-handler */
+    movl   %ecx,           0x18(%edx)   /* save ECX as SEH handler */
+    movl   $0xffffffff,    %ecx         /* set ECX to -1 */
+    movl   %ecx,           0x14(%edx)   /* save ECX as next SEH item */
+    leal   0x14(%edx),     %ecx         /* load address of next SEH item */
+    movl   %ecx,           0x24(%eax)   /* save next SEH */
+
+    movl   $1f,            %ecx         /* abs address of finish */
+    movl   %ecx,           (%edx)       /* save address of finish as return address for context function */
+                                        /* entered after context function returns */
+ 
+    addl   $0x10,          %esp         /* deallocate stack space */
+    pop    %ebp
+
+    ret
+
+1:
+    /* ESP points to same address as ESP on entry of context function + 0x4 */
+    xorl    %eax,  %eax
+    movl    %eax,  (%esp)               /* exit code is zero */
+    call   _exit                        /* exit application */
+    hlt
+.def _align_stack; .scl 2; .type 32; .endef
+.def _seh_fcontext; .scl 2; .type 32; .endef
+.def _exit; .scl 2; .type 32; .endef
diff -urN origsrc/boost_1_52_0/libs/context/src/asm/make_i386_ms_pe_gas.S src/boost_1_52_0/libs/context/src/asm/make_i386_ms_pe_gas.S
--- origsrc/boost_1_52_0/libs/context/src/asm/make_i386_ms_pe_gas.S	1970-01-01 09:00:00.000000000 +0900
+++ src/boost_1_52_0/libs/context/src/asm/make_i386_ms_pe_gas.S	2012-12-13 12:45:14.450141900 +0900
@@ -0,0 +1,105 @@
+/*
+            Copyright Oliver Kowalke 2009.
+   Distributed under the Boost Software License, Version 1.0.
+      (See accompanying file LICENSE_1_0.txt or copy at
+          http://www.boost.org/LICENSE_1_0.txt)
+*/
+
+/********************************************************************
+ *                                                                  *
+ *  --------------------------------------------------------------  *
+ *  |    0    |    1    |    2    |    3    |    4     |    5    |  *
+ *  --------------------------------------------------------------  *
+ *  |    0h   |   04h   |   08h   |   0ch   |   010h   |   014h  |  *
+ *  --------------------------------------------------------------  *
+ *  |   EDI   |   ESI   |   EBX   |   EBP   |   ESP    |   EIP   |  *
+ *  --------------------------------------------------------------  *
+ *  --------------------------------------------------------------  *
+ *  |    6    |    7    |    8    |                              |  *
+ *  --------------------------------------------------------------  *
+ *  |   018h  |   01ch  |   020h  |                              |  *
+ *  --------------------------------------------------------------  *
+ *  |    sp   |   size  |  limit  |                              |  *
+ *  --------------------------------------------------------------  *
+ *  --------------------------------------------------------------  *
+ *  |    9    |                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  |  024h   |                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  |fc_execpt|                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  --------------------------------------------------------------  *
+ *  |   10    |                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  |  028h   |                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  |fc_strage|                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  --------------------------------------------------------------  *
+ *  |   11    |    12   |                                        |  *
+ *  --------------------------------------------------------------  *
+ *  |  02ch   |   030h  |                                        |  *
+ *  --------------------------------------------------------------  *
+ *  | fc_mxcsr|fc_x87_cw|                                        |  *
+ *  --------------------------------------------------------------  *
+ *                                                                  *
+ * *****************************************************************/
+
+/* Based on make_i386_ms_pe_masm.asm and make_i386_sysv_elf_gas.S */
+
+.text
+.globl _make_fcontext
+.align 2
+.def _make_fcontext; .scl 2; .type 32; .endef
+_make_fcontext:
+    pushl  %ebp                         /* save previous frame pointer; get the stack 16 byte aligned */
+    movl   %esp,           %ebp         /* set EBP to ESP */
+    subl   $0x10,          %esp         /* allocate stack space */
+
+    movl   0x8(%ebp),      %eax         /* load 1. arg of make_fcontext, pointer to context stack (base) */
+    leal   -0x34(%eax),    %eax         /* reserve space for fcontext_t at top of context stack */
+    movl   %eax,           (%esp)       /* address in EAX becomes 1. arg of align_stack */
+    call   _align_stack                 /* call align_stack, EAX contains address at 16 byte boundary after return */
+                                        /* pointer to fcontext_t and address of context stack */
+
+    movl   0x8(%ebp),      %ecx         /* load 1. arg of make_fcontext, pointer to context stack (base) */
+    movl   %ecx,           0x18(%eax)   /* save address of context stack (base) in fcontext_t */
+    movl   0xc(%ebp),      %edx         /* load 2. arg of make_fcontext, context stack size */
+    movl   %edx,           0x1c(%eax)   /* save context stack size in fcontext_t */
+    negl   %edx                         /* negate stack size for LEA instruction (== substraction) */
+    leal   (%ecx,%edx),    %ecx         /* compute bottom address of context stack (limit) */
+    movl   %ecx,           0x20(%eax)   /* save address of context stack (limit) in fcontext_t */
+    movl   0x10(%ebp),     %ecx         /* load 3. arg of make_fcontext, pointer to context function */
+    movl   %ecx,           0x14(%eax)   /* save address of context function in fcontext_t */
+
+    stmxcsr  0x2c(%eax)                 /* save MMX control and status word */
+    fnstcw   0x30(%eax)                 /* save x87 control word */
+
+    leal   -0x1c(%eax),    %edx         /* reserve space for the last frame on context stack; (ESP - 0x4) % 16 == 0 */
+    movl   %edx,           0x10(%eax)   /* save address in EDX as stack pointer for context function */
+
+    movl   $_seh_fcontext, %ecx         /* set ECX to exception-handler */
+    movl   %ecx,           0x18(%edx)   /* save ECX as SEH handler */
+    movl   $0xffffffff,    %ecx         /* set ECX to -1 */
+    movl   %ecx,           0x14(%edx)   /* save ECX as next SEH item */
+    leal   0x14(%edx),     %ecx         /* load address of next SEH item */
+    movl   %ecx,           0x24(%eax)   /* save next SEH */
+
+    movl   $1f,            %ecx         /* abs address of finish */
+    movl   %ecx,           (%edx)       /* save address of finish as return address for context function */
+                                        /* entered after context function returns */
+ 
+    addl   $0x10,          %esp         /* deallocate stack space */
+    pop    %ebp
+
+    ret
+
+1:
+    /* ESP points to same address as ESP on entry of context function + 0x4 */
+    xorl    %eax,  %eax
+    movl    %eax,  (%esp)               /* exit code is zero */
+    call   _exit                        /* exit application */
+    hlt
+.def _align_stack; .scl 2; .type 32; .endef
+.def _seh_fcontext; .scl 2; .type 32; .endef
+.def _exit; .scl 2; .type 32; .endef
diff -urN origsrc/boost_1_52_0/boost/context/fcontext.hpp src/boost_1_52_0/boost/context/fcontext.hpp
--- origsrc/boost_1_52_0/boost/context/fcontext.hpp	2012-09-18 17:34:31.000000000 +0900
+++ src/boost_1_52_0/boost/context/fcontext.hpp	2012-12-12 20:47:10.852115800 +0900
@@ -26,7 +26,7 @@
 #if defined(__x86_64__) || defined(__x86_64) \
     || defined(__amd64__) || defined(__amd64) \
     || defined(_M_X64) || defined(_M_AMD64)
-# if defined(BOOST_WINDOWS)
+# if defined(BOOST_WINDOWS) || defined(__CYGWIN__)
 #  include <boost/context/detail/fcontext_x86_64_win.hpp>
 # else
 #  include <boost/context/detail/fcontext_x86_64.hpp>
@@ -37,7 +37,7 @@
     || defined(__X86__) || defined(_X86_) || defined(__THW_INTEL__) \
     || defined(__I86__) || defined(__INTEL__) || defined(__IA32__) \
     || defined(_M_IX86) || defined(_I86_)
-# if defined(BOOST_WINDOWS)
+# if defined(BOOST_WINDOWS) || defined(__CYGWIN__)
 #  include <boost/context/detail/fcontext_i386_win.hpp>
 # else
 #  include <boost/context/detail/fcontext_i386.hpp>
